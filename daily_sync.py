import g_sheet_api
import time
from datetime import datetime, timedelta, timezone # <<< ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ timezone import ‡πÅ‡∏•‡πâ‡∏ß
import traceback
import re
from google.api_core.exceptions import GoogleAPIError 

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å ---
MASTER_SHEET_URL = "https://docs.google.com/spreadsheets/d/17lOtuHum9VHdukfHr7143uCGydVZSaJNi2RhzGfh81g/edit#gid=0"
STAFFS_SHEET_NAME = "Staffs"
TRANSACTION_SHEET_NAME = "Transaction"
CONFIG_SHEET_NAME = "Config"

# --- Retry settings ---
MAX_RETRIES = 5
INITIAL_RETRY_DELAY = 1 

# --- ‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏û‡∏µ‡πà ---
def retry_api_call(func, *args, **kwargs):
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            return func(*args, **kwargs)
        except GoogleAPIError as e: 
            error_message = str(e).lower()
            if any(err_key in error_message for err_key in ["quota", "rate limit", "unavailable", "timeout", "502", "503"]):
                wait_time = INITIAL_RETRY_DELAY * (2 ** (attempt - 1)); print(f"    ‚ö†Ô∏è (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt}/{MAX_RETRIES}) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API: {e}. ‡∏£‡∏≠ {wait_time} ‡∏ß‡∏¥..."); time.sleep(wait_time)
            else:
                print(f"    ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: {e}"); raise 
        except Exception as e:
            print(f"    ‚ùå (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {attempt}/{MAX_RETRIES}) ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}. ‡∏£‡∏≠ {INITIAL_RETRY_DELAY * (2 ** (attempt - 1))} ‡∏ß‡∏¥..."); time.sleep(INITIAL_RETRY_DELAY * (2 ** (attempt - 1))) 
    raise Exception(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ API call ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å {MAX_RETRIES} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")

def get_sheet_data_as_objects(sheet, header_row=1, data_range=None):
    try:
        all_values = retry_api_call(sheet.get, data_range) if data_range else retry_api_call(lambda: sheet.get_all_values())
    except Exception as e:
        print(f"    [Helper Error] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ get values ‡∏à‡∏≤‡∏Å‡∏ä‡∏µ‡∏ï '{sheet.title}': {e}"); return []
    if len(all_values) < header_row: return []
    headers = [str(h).strip() for h in all_values[header_row - 1]]
    data_rows = all_values[header_row:]
    return [dict(zip(headers, row + [''] * (len(headers) - len(row)))) for row in data_rows]

def append_and_format_separator(sheet, text, bg_color, text_color, num_cols_to_merge=12):
    current_highest_row_in_sheet = len(retry_api_call(lambda: sheet.get_all_values())) 
    next_row_num = current_highest_row_in_sheet + 1
    separator_row_data = [text] + [''] * (num_cols_to_merge - 1) 
    try:
        retry_api_call(sheet.append_row, separator_row_data, value_input_option='USER_ENTERED')
        merge_range = f'A{next_row_num}:{chr(ord("A") + num_cols_to_merge - 1)}{next_row_num}'
        retry_api_call(sheet.merge_cells, merge_range)
        retry_api_call(sheet.format, merge_range, {"backgroundColor": bg_color, "horizontalAlignment": "CENTER", "textFormat": { "bold": True, "foregroundColor": text_color }})
        print(f"    üëç ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {next_row_num} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
    except Exception as e:
        print(f"    ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô '{text}': {e}"); traceback.print_exc()
    time.sleep(0.5)

def get_target_date_and_mode():
    now_utc = datetime.now(timezone.utc)
    now_bkk = now_utc + timedelta(hours=7)
    if now_bkk.hour == 0:
        target_date = now_bkk - timedelta(days=1); print(f"üéØ ‡πÇ‡∏´‡∏°‡∏î: ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (Reconciliation) | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target_date.strftime('%d/%m/%Y')}")
    else:
        target_date = now_bkk; print(f"üéØ ‡πÇ‡∏´‡∏°‡∏î: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (Hourly) | ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {target_date.strftime('%d/%m/%Y')}")
    return target_date

def delete_date_block(sheet, date_str_for_header):
    print(f"    üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö...")
    all_data = retry_api_call(sheet.get_all_values)
    start_marker = f"--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header}"
    end_marker = f"--- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header}"
    blocks_to_delete = []
    current_start = -1
    for i, row in enumerate(all_data):
        if not row: continue
        cell_content = str(row[0])
        if start_marker in cell_content: current_start = i
        if end_marker in cell_content and current_start != -1:
            current_end = i
            if (i + 1) < len(all_data) and all(cell == '' for cell in all_data[i+1]): current_end = i + 1
            blocks_to_delete.append((current_start, current_end)); current_start = -1
    if not blocks_to_delete:
        print(f"    ‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö")
        return
    for start, end in sorted(blocks_to_delete, reverse=True):
        start_1_based, end_1_based = start + 1, end + 1
        print(f"    üóëÔ∏è ‡∏û‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {start_1_based} ‡∏ñ‡∏∂‡∏á {end_1_based}. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö...")
        try:
            body = {"requests": [{"deleteDimension": {"range": {"sheetId": sheet.id, "dimension": "ROWS", "startIndex": start, "endIndex": end + 1}}}]}
            retry_api_call(sheet.spreadsheet.batch_update, body)
            print(f"    ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡πà‡∏≤ {start_1_based}-{end_1_based} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            time.sleep(1)
        except Exception as e:
             print(f"    ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡∏Ç‡∏ì‡∏∞‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß: {e}")

# --- Main Sync Logic Function ---
def run_auto_sync():
    client = None
    try:
        # <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° timezone +7 ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Log ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô >>>
        print(f"üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Python... [{datetime.now(timezone.utc) + timedelta(hours=7):%Y-%m-%d %H:%M:%S}]")
        # <<< END: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç >>>

        client = g_sheet_api.get_gspread_client()
        master_workbook = retry_api_call(client.open_by_url, MASTER_SHEET_URL)
        print("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Staffs ‡πÅ‡∏•‡∏∞ Config...")
        staffs_sheet, config_sheet = (retry_api_call(master_workbook.worksheet, name) for name in [STAFFS_SHEET_NAME, CONFIG_SHEET_NAME])
        all_staffs, project_configs = get_sheet_data_as_objects(staffs_sheet), {conf.get('ConfigType','').strip(): conf for conf in get_sheet_data_as_objects(config_sheet) if conf.get('ConfigType')}
        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏ö {len(all_staffs)} ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞ {len(project_configs)} ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")

        current_processing_date = get_target_date_and_mode()
        date_str_for_compare = f"{current_processing_date.day}/{current_processing_date.month}/{current_processing_date.year}"
        date_str_for_id = current_processing_date.strftime('%d%m%Y')
        date_str_for_header = current_processing_date.strftime('%d/%m/%Y')
        
        print(f"\n--- üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ---")
        transactions_to_append_data, data_rows_for_person_separator_indices, staff_data_found_for_day, num_cols = [], [], False, 12

        for i, staff in enumerate(all_staffs):
            email, sheet_url, config_type, project_name = (staff.get(k, "").strip() for k in ["E-Mail", "PersonalSheetURL", "ConfigType", "Project Name"])
            print(f"\n--- ‚öôÔ∏è ({i+1}/{len(all_staffs)}) ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡∏≠‡∏á: {email} ---")
            if not all([email, sheet_url, config_type]): print(f"    ‚è© ‡∏Ç‡πâ‡∏≤‡∏°: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"); continue
            config = project_configs.get(config_type)
            if not config: print(f"    ‚è© ‡∏Ç‡πâ‡∏≤‡∏°: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ConfigType '{config_type}'"); continue
            try:
                emp_workbook = retry_api_call(client.open_by_url, sheet_url)
                project_sheet, mgmt_sheet, timestamps_sheet = (retry_api_call(emp_workbook.worksheet, name) for name in [config['EmployeeSheetTab'], config['MgmtSheetTab'], 'Timestamps'])
                emp_data_as_grid, timestamps_data_as_grid = retry_api_call(project_sheet.get_all_values), retry_api_call(timestamps_sheet.get_all_values)
                mgmt_data_objects = get_sheet_data_as_objects(mgmt_sheet, int(config.get('MgmtHeaderRow', 1)), config.get('MgmtDataRange'))
                date_col_index = ord(config.get('DateColumn').upper()) - 65
                submission_row, timestamps_row, submission_row_index = None, None, -1
                for idx, row in enumerate(emp_data_as_grid[1:]): 
                    if date_col_index < len(row):
                        row_date_str = str(row[date_col_index]).strip()
                        try:
                            parts = row_date_str.replace('-', '/').split('/'); d, m, y = map(int, parts); y += 2000 if y < 100 else 0
                            if f"{d}/{m}/{y}" == date_str_for_compare:
                                submission_row, submission_row_index = row, idx + 1; print(f"    üëç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_compare} ‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {submission_row_index + 1}"); break
                        except (ValueError, IndexError): continue
                if submission_row_index != -1 and submission_row_index < len(timestamps_data_as_grid):
                    timestamps_row = timestamps_data_as_grid[submission_row_index]; print(f"    üëç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {submission_row_index + 1}")
                if not submission_row:
                    print(f"    -> ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_compare}"); continue
                
                status_header, name_header, url_header = config.get('MgmtStatusColumn'), config.get('MgmtTypeNameColumn'), config.get('MgmtUrlColumn')
                active_page_map = {int(re.search(r'\d+', str(item.get('No.'))).group(0)): item for item in mgmt_data_objects if 'active' in str(item.get(status_header, '')).strip().lower() and item.get('No.') and re.search(r'\d+', str(item.get('No.')))}
                start_col_index, cols_per_page = ord(config.get('PageStartColumn').upper()) - 65, int(config.get('ColumnsPerPage'))
                
                staff_transactions_for_current_staff = []
                for page_num in range(1, 41):
                    page_start_index = start_col_index + (page_num - 1) * cols_per_page
                    if page_start_index >= len(submission_row): break
                    link1, link2 = (submission_row[i] if i < len(submission_row) else '' for i in [page_start_index, page_start_index + 1])
                    if not link1 and not link2: continue
                    time_sent = str(timestamps_row[(page_num * 2) + 1]).strip() if timestamps_row and (page_num * 2) + 1 < len(timestamps_row) else ''
                    page_details = active_page_map.get(page_num)
                    page_name, page_url = (page_details.get(name_header, ''), page_details.get(url_header, '')) if page_details else ('', '')
                    if page_details or time_sent: print(f"    ‚úîÔ∏è ‡πÄ‡∏û‡∏à #{page_num}: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡πÄ‡∏ß‡∏•‡∏≤: {time_sent}")
                    else: print(f"    ‚ùå ‡πÄ‡∏û‡∏à #{page_num}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Active ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á")
                    # <<< START: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ >>>
                    now_bkk_for_sync = datetime.now(timezone.utc) + timedelta(hours=7)
                    sync_timestamp_str = now_bkk_for_sync.strftime('%d/%m/%Y, %H:%M:%S')
                    record_id = f"{email}_{project_name}_{date_str_for_id}_Page{page_num}"
                    new_row = [record_id, sync_timestamp_str, email, f"{project_name} - Page {page_num}", date_str_for_header, link1, link2, 'Completed', sheet_url, page_url, page_name, time_sent]
                    # <<< END: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ >>>
                    staff_transactions_for_current_staff.append(new_row)

                if staff_transactions_for_current_staff:
                    print(f"    ‚úçÔ∏è ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(staff_transactions_for_current_staff)} ‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á {email} ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡πÉ‡∏ô Batch...")
                    transactions_to_append_data.extend(staff_transactions_for_current_staff)
                    staff_data_found_for_day = True 
                    if i < len(all_staffs) - 1: 
                        transactions_to_append_data.append([''] * num_cols); data_rows_for_person_separator_indices.append(len(transactions_to_append_data) - 1)
                else:
                    print(f"    ‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {email} ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
            except Exception as e: print(f"    ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ï‡∏Ç‡∏≠‡∏á {email}: {e}"); traceback.print_exc()
        
        # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á) ---
        if not staff_data_found_for_day:
            print(f"\n‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ")
        else:
            transaction_sheet = retry_api_call(master_workbook.worksheet, TRANSACTION_SHEET_NAME)

            # <<< START: ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏û‡∏µ‡πà >>>
            # 1. ‡∏•‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô
            delete_date_block(transaction_sheet, date_str_for_header)
            
            # 2. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏•‡∏á‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏£‡πá‡∏ß)
            print(f"\n‚úçÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà {len(transactions_to_append_data)} ‡πÅ‡∏ñ‡∏ß‡∏•‡∏á‡πÉ‡∏ô Transaction Sheet...")
            initial_row_count = len(retry_api_call(lambda: transaction_sheet.get_all_values())) 
            retry_api_call(transaction_sheet.append_rows, transactions_to_append_data, value_input_option='USER_ENTERED')
            print("    ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Batch ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

            # 3. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏õ
            person_separator_bg_color = { "red": 0.95, "green": 0.98, "blue": 0.95 }
            print(f"    ‚ö°Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß...")
            for relative_idx in data_rows_for_person_separator_indices:
                current_absolute_row_num_1based = initial_row_count + relative_idx + 1 
                format_range = f'A{current_absolute_row_num_1based}:{chr(ord("A") + num_cols - 1)}{current_absolute_row_num_1based}'
                try: retry_api_call(transaction_sheet.format, format_range, {"backgroundColor": person_separator_bg_color})
                except Exception as e: print(f"    ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß {current_absolute_row_num_1based}: {e}")
            print("    ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            
            # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡∏´‡∏±‡∏ß-‡∏ó‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á (‡∏ï‡∏≤‡∏° Logic ‡πÄ‡∏î‡∏¥‡∏°)
            daily_separator_bg_color = { "red": 0.95, "green": 0.95, "blue": 0.8 }; daily_separator_text_color = { "red": 0.5, "green": 0.5, "blue": 0.2 }
            blank_row_clean_color = { "red": 1, "green": 1, "blue": 1 }
            
            # --- START FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç NameError ‡πÅ‡∏•‡∏∞ DeprecationWarning ---
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠ date_str_for_header
            print(f"\n--- üìÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ---")
            
            new_block_start_row = initial_row_count + 1
            retry_api_call(transaction_sheet.insert_rows, [['']]*3, row=new_block_start_row, value_input_option='USER_ENTERED')
            time.sleep(1)
            
            header_range = f'A{new_block_start_row}'
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö argument ‡πÉ‡∏ô .update()
            retry_api_call(transaction_sheet.update, [[f"--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ---"]], header_range, value_input_option='USER_ENTERED')
            retry_api_call(transaction_sheet.merge_cells, f'A{new_block_start_row}:{chr(ord("A") + num_cols - 1)}{new_block_start_row}')
            retry_api_call(transaction_sheet.format, header_range, {"backgroundColor": daily_separator_bg_color, "horizontalAlignment": "CENTER", "textFormat": { "bold": True, "foregroundColor": daily_separator_text_color }})
            
            blank_range = f'A{new_block_start_row+1}:{chr(ord("A") + num_cols - 1)}{new_block_start_row+2}'
            retry_api_call(transaction_sheet.format, blank_range, {"backgroundColor": blank_row_clean_color})

            print("    ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
            # --- END FIX ---
            
            print("\n‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏±‡πà‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô...")
            append_and_format_separator(transaction_sheet, f"--- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_str_for_header} ---", daily_separator_bg_color, daily_separator_text_color, num_cols)
            
            print("    ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡πà‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö...")
            current_rows_after_all_data = len(retry_api_call(lambda: transaction_sheet.get_all_values())) 
            retry_api_call(transaction_sheet.append_row, [''] * num_cols, value_input_option='USER_ENTERED')
            format_range_for_clean_blank = f'A{current_rows_after_all_data + 1}:{chr(ord("A") + num_cols - 1)}{current_rows_after_all_data + 1}'
            retry_api_call(transaction_sheet.format, format_range_for_clean_blank, {"backgroundColor": blank_row_clean_color, "textFormat": { "bold": False, "foregroundColor": { "red": 0, "green": 0, "blue": 0 } } })
            time.sleep(0.5)
            # <<< END: ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà >>>
            
    except Exception as e:
        print(f"üî•üî•üî• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå: {e}")
        traceback.print_exc()

    # <<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° timezone +7 ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Log ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ >>>
    print(f"\n--- üéâ ‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô --- [{datetime.now(timezone.utc) + timedelta(hours=7):%Y-%m-%d %H:%M:%S}]")
    time.sleep(1) 

if __name__ == '__main__':
    run_auto_sync()